import os

def generate_script(os_type, proj_type, ci_option, deploy_option):
     # return "print(\"testing\")"
     os_map = { # the url shortnames arent that useful as filenames
          'lin': 'linux',
          'mac': 'macos',
          'wind': 'windows'
     }
     proj_map = { # see why i have an os map
          'front': 'frontend',
          'full': 'fullstack',
          'back': 'backend',
          'micro': 'microservice'
     }
     
     os_full = os_map.get(os_type, 'linux')
     proj_full = proj_map.get(proj_type, proj_type)  # Use original if not in map
     
     script = _generate_header(os_full, proj_full, ci_option, deploy_option)
     script += _generate_imports()
     script += _generate_os_verification()

     script += _generate_project_fragment(proj_full)

     #we only add the fragments if the url asks for it     
     if ci_option != 'none':
         script += _generate_ci_setup()
     
     if deploy_option != 'none':
         script += _generate_deployment_setup()
     
     
     script += _generate_main_function(os_full, proj_full, ci_option, deploy_option)

     script += _generate_entrypoint()
     
     return script

#########################################################################
#########################################################################

def _load_fragment(name):
     fragments_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'fragments') #sometimes the os yells about the path :(
     fragment_path = os.path.join(fragments_dir, f"{name}.py")
     
     try:
          if os.path.exists(fragment_path):
               with open(fragment_path, 'r') as f:
                    return f.read()
          else:
               return f"# {name} fragment not found\nraise RuntimeError(f\"Required fragment '{name}' not found\")\n"
     except Exception as e:
          return f"# Error loading {name} fragment\nraise RuntimeError(f\"Error loading fragment {name}: {str(e)}\")\n"

def _generate_header(os_full, proj_type, ci_option, deploy_option):
     header = "#!/usr/bin/env python3\n"
     header += f"# Generated by Spawnpoint for {os_full}/{proj_type}\n"
     header += f"# CI: {ci_option}, Deploy: {deploy_option}\n\n"
     return header

def _generate_imports():
     return "import os\nimport sys\nimport argparse\n\n"

def _generate_os_verification():
     platform_check = _load_fragment('platform_check')
     
     return platform_check + "\n"

def _generate_ci_setup():
     return "\n    # CI setup\n" + _load_fragment(f"ci_cd_setup")

def _generate_deployment_setup():
     return "\n    # Deployment setup\n" + _load_fragment(f"deployment_setup") + "\n"

def _generate_project_fragment(proj_type):
     return _load_fragment(f"{proj_type}_setup")


def _generate_main_function(os_full, proj_type, ci_option, deploy_option):
     main_func = "\ndef main():\n"
     main_func += f"    print(\"Setting up {proj_type} project for {os_full}\")\n"
     
     main_func += f"    verify_platform(\"{os_full}\")\n\n"
     
     main_func += f"    setup_{proj_type}(\"{proj_type}\")\n\n"
     
     if ci_option != 'none':
         main_func += f"    setup_ci_cd(\"{ci_option}\")\n"
     
     if deploy_option != 'none':
         main_func += f"    setup_deployment(\"{deploy_option}\")\n"
     
     main_func += "\n"
     
     main_func += "\n    print(\"Setup complete!\")\n"
     return main_func

def _generate_entrypoint():
     entrypoint = "\nif __name__ == \"__main__\":\n"
     entrypoint += "    main()\n"
     return entrypoint
