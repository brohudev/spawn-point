from flask import Blueprint, jsonify, request
import os
import sys
import argparse
from flask import Response

bp = Blueprint('api', __name__, url_prefix='/api')

@bp.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint."""
    return jsonify({
        "status": "healthy",
        "version": "1.0.0",
        "service": "spawnpoint-api"
    })


# OS-specific project type endpoints
@bp.route('/<os>/<project_type>', methods=['GET'])
def generate_os_project(os, project_type):
     """Generate script for specific OS and project type."""
     # Validate OS
     valid_os = ['lin', 'wind', 'mac']
     if os not in valid_os:
          return jsonify({
               "error": "Invalid OS",
               "message": f"OS must be one of: {', '.join(valid_os)}"
          }), 400

     # Validate project type
     valid_types = ['front', 'back', 'full']
     if project_type not in valid_types:
          return jsonify({
               "error": "Invalid project type",
               "message": f"Project type must be one of: {', '.join(valid_types)}"
          }), 400

     # Get optional parameters
     ci = request.args.get('ci', 'none')
     deploy = request.args.get('deploy', 'none')

     # Generate a Python script based on parameters
     def generate_script(os_type, proj_type, ci_option, deploy_option):
          """Generate a Python script based on the provided parameters."""
          script = f"""#!/usr/bin/env python3
          # Generated by Spawnpoint for {os_type}/{proj_type}
          # CI: {ci_option}, Deploy: {deploy_option}


          def main():
          print("Setting up {proj_type}end project for {os_type}")
          print(f"CI option: {ci_option}")
          print(f"Deploy option: {deploy_option}")

          # OS-specific setup
          if "{os_type}" == "linux":
               print("Performing Linux-specific setup...")
          elif "{os_type}" == "macos":
               print("Performing macOS-specific setup...")
          elif "{os_type}" == "windows":
               print("Performing Windows-specific setup...")

          # Project type setup
          if "{proj_type}" == "front":
               print("Setting up frontend project...")
          elif "{proj_type}" == "back":
               print("Setting up backend project...")
          elif "{proj_type}" == "full":
               print("Setting up full-stack project...")

          # CI setup
          if "{ci_option}" != "none":
               print(f"Setting up CI with {ci_option}...")

          # Deploy setup
          if "{deploy_option}" != "none":
               print(f"Setting up deployment to {deploy_option}...")

          print("Setup complete!")

          if __name__ == "__main__":
          parser = argparse.ArgumentParser(description='Project setup script')
          parser.add_argument('--ci', default='{ci_option}', help='CI option')
          parser.add_argument('--deploy', default='{deploy_option}', help='Deployment option')
          args = parser.parse_args()

          main()
          """
          return script

     # Generate script based on parameters
     script_content = generate_script(os, project_type, ci, deploy)

     # Return the script as plain text
     return Response(script_content, mimetype='text/plain')